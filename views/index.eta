<!DOCTYPE html>
<html lang="en">

<head>
    <title>Banegårdsløb 2023</title>
    <meta charset='utf-8'>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script src='https://unpkg.com/@turf/turf@6/turf.min.js'></script>

    <link rel='stylesheet' href='https://unpkg.com/maplibre-gl@3.3.0/dist/maplibre-gl.css' />
    <script src='https://unpkg.com/maplibre-gl@3.3.0/dist/maplibre-gl.js'></script>
    <style>
        body {
            margin: 0;
            padding: 0;
        }

        html,
        body,
        #map {
            height: 100%;
        }

        #drawer {
            position: fixed;
            background: white;
            max-width: 400px;
            width: 100%;
            height: 200px;
            margin: auto;
            left: 0;
            right: 0;
            overflow: auto;
            bottom: -210px;
            transition: bottom 0.4s ease-out;
            z-index: 2;
            padding: 5px;
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            grid-template-rows: repeat(3, 1fr);
            grid-column-gap: 0px;
            grid-row-gap: 0px;
        }

        #drawer.active {
            bottom: 0;
        }

        .div1 {
            margin: auto;
            grid-area: 1 / 1 / 2 / 3;
        }

        .button {
            margin: auto;
            color: white;
            background: lightgrey;
            width: 80%;
            border-radius: 10px;
            padding: 10px;
        }

        .div2 {

            grid-area: 2 / 1 / 3 / 2;
        }

        .div3 {

            grid-area: 2 / 2 / 3 / 3;
        }

        .div4 {

            grid-area: 3 / 1 / 4 / 2;
        }

        .div5 {

            grid-area: 3 / 2 / 4 / 3;
        }
    </style>
</head>

<body>
    <div id="map"></div>
    <div id="drawer">
    </div>

    <script>
        const user = "<%= it.name %>";
        const drawer = document.getElementById("drawer")
        const map = new maplibregl.Map({
            container: 'map',
            style: 'https://api.maptiler.com/maps/basic-v2/style.json?key=GKEN8JYHhczzRjUu2eA7',
            center: [12.5422, 55.6589],
            zoom: 16,
            attributionControl: false
        });

        const svar = (gps, punkt, besvarelse) => {
            console.log(gps, punkt, besvarelse)

            drawer.classList.remove("active")
            spgGeojson.features.splice(spgGeojson.features.findIndex(e=> e.id==punkt.id), 1)
            map.getSource('spg').setData(spgGeojson)
            
            const {KorrektSvar, fid} = punkt.properties
            const {latitude,longitude}=gps.coords;

            fetch("http://localhost:3000/collections/answers/items", {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    "type": "FeatureCollection",
                    "features": [
                        {
                            "type": "Feature",
                            "properties": {
                                SpgID: fid,
                                Username: user,
                                Time: gps.timestamp,
                                Status: besvarelse == KorrektSvar ? 1 : 0
                            },
                            "geometry": {
                                "coordinates": [
                                    longitude,
                                    latitude
                                ],
                                "type": "Point"
                            }
                        }
                    ]
                })
            }).then(e=>e.json()).then(res=>{
                console.log(res)
            })


        }
        let gpsFix;
        let activeSpg;

        let spgGeojson


        map.on('load', () => {
            fetch("http://localhost:3000/collections/spg/items?f=json").then(e => e.json()).then(e => {
                spgGeojson = e;
                map.addSource('spg', {
                    'type': 'geojson',
                    'data': spgGeojson
                });

                map.addLayer({
                    'id': 'spg',
                    'type': 'circle',
                    'source': 'spg',
                    'paint': {
                        'circle-color': 'steelblue',
                        'circle-stroke-color': 'black',
                        'circle-stroke-width': 2,
                        'circle-radius': 5
                    }
                });
            });

        });

        const gps = new maplibregl.GeolocateControl({
            positionOptions: {
                enableHighAccuracy: true
            },
            fitBoundsOptions: {
                maxZoom: 18
            },
            trackUserLocation: true
        })

        const onLocation = e => {
            gpsFix = e;
            activeSpg = turf.nearestPoint(turf.point([e.coords.longitude, e.coords.latitude]), spgGeojson);

            var distance = turf.distance(turf.point([e.coords.longitude, e.coords.latitude]), activeSpg, { units: 'meters', steps: 360 })
            if (distance < 9999999999999999999999) {
                const { Spørgsmål, AnswerA, AnswerB, AnswerC, AnswerD, KorrektSvar } = activeSpg.properties
                const markup = `
                    <h1 class="div1">${Spørgsmål}</h1>
                    <h2 class="div2 button" onclick=svar(gpsFix,activeSpg,0)>${AnswerA}</h2>
                    <h2 class="div3 button" onclick=svar(gpsFix,activeSpg,1)>${AnswerB} </h2>
                    <h2 class="div4 button" onclick=svar(gpsFix,activeSpg,2)>${AnswerC}</h2>
                    <h2 class="div5 button" onclick=svar(gpsFix,activeSpg,3)>${AnswerD}</h2>
                    `;
                document.querySelector("#drawer").innerHTML = markup
                drawer.classList.add("active")

            }
        }

        gps.on('geolocate', e => onLocation(e));

        map.addControl(gps);

    </script>
</body>

</html>